name: mwc-wallet
version: "3.2.2"
about: Reference MWC Wallet
author: The MWC Team

args:
  - floonet:
      help: Run mwc against the Floonet (as opposed to mainnet)
      long: floonet
      takes_value: false
  - usernet:
      help: Run mwc as a local-only network. Doesn't block peer connections but will not connect to any peer or seed
      long: usernet
      takes_value: false
  - pass:
      help: Wallet passphrase used to encrypt wallet seed
      short: p
      long: pass
      takes_value: true
  - account:
      help: Wallet account to use for this operation
      short: a
      long: account
      takes_value: true
      default_value: default
  - top_level_dir:
      help: Top directory in which wallet files are stored (location of 'mwc-wallet.toml')
      short: t
      long: top_level_dir
      takes_value: true
  - external:
      help: Listen on 0.0.0.0 interface to allow external connections (default is 127.0.0.1)
      short: e
      long: external
      takes_value: false
  - show_spent:
      help: Show spent outputs on wallet output commands
      short: s
      long: show_spent
      takes_value: false
  - api_server_address:
      help: Api address of running node on which to check inputs and post transactions
      short: r
      long: api_server_address
      takes_value: true
subcommands:
  - cli:
      about: Start the wallet in interactive CLI mode (EXPERIMENTAL and UNDER DEVELOPMENT)
  - account:
      about: List wallet accounts or create a new account
      args:
        - create:
            help: Create a new wallet account with provided name
            short: c
            long: create
            takes_value: true
  - listen:
      about: Runs the wallet in listening mode waiting for transactions
      args:
        - port:
            help: Port on which to run the wallet listener
            short: l
            long: port
            takes_value: true
        - method:
            help: Which method to use for communication
            short: m
            long: method
            possible_values:
              - http
              - mwcmqs
            default_value: http
            takes_value: true
        - no_tor:
            help: Don't start Tor listener when starting HTTP listener
            short: n
            long: no_tor
            takes_value: false
  - owner_api:
      about: Runs the wallet's local web API
      args:
        - port:
            help: Port on which to run the wallet owner listener
            short: l
            long: port
            takes_value: true
        - run_foreign:
            help: Also run the Foreign API
            long: run_foreign
            takes_value: false
  - send:
      about: Builds a transaction to send coins and sends to the specified listener directly
      args:
        - amount:
            help: Number of coins to send with optional fraction, e.g. 12.423
            index: 1
        - minimum_confirmations:
            help: Minimum number of confirmations required for an output to be spendable
            short: c
            long: min_conf
            default_value: "10"
            takes_value: true
        - exclude_change_outputs:
            help: If this flag is set, 'minimum_confirmations' will not apply to change_outputs for this request. Instead, minimum_confirmations_change_outputs will be used as the minimum_confirmations required for change_outputs.
            short: x
            long: exclude_change_outputs
            takes_value: false
        - minimum_confirmations_change_outputs:
            help: minimum confirmations required for change outputs. This value may only be set if the -exclude_change_outputs flag is set.
            short: r
            long: minimum_confirmations_change_outputs
            default_value: "1"
            takes_value: true
        - selection_strategy:
            help: Coin/Output selection strategy.
            short: s
            long: selection
            possible_values:
              - all
              - smallest
            default_value: smallest
            takes_value: true
        - estimate_selection_strategies:
            help: Estimates all possible Coin/Output selection strategies.
            short: e
            long: estimate-selection
        - late_lock:
            help: EXPERIMENTAL - Do not lock the coins immediately, instead only lock them during finalization.
            short: l
            long: late-lock
        - change_outputs:
            help: Number of change outputs to generate (mainly for testing)
            short: o
            long: change_outputs
            default_value: "1"
            takes_value: true
        - method:
            help: Method for sending this transaction
            short: m
            long: method
            possible_values:
              - http
              - file
              - slatepack
              - self
              - mwcmqs
            default_value: http
            takes_value: true
        - dest:
            help: Send the transaction to the provided server (start with http://) or save as file.
            short: d
            long: dest
            takes_value: true
        - apisecret:
            help: receiver wallet apisecret. Applicable to http/https address only. Default is none
            short: a
            long: apisecret
            takes_value: true
        - request_payment_proof:
            help: Request a payment proof from the recipient. If sending to a Tor address, the address will be filled automatically.
            short: y
            long: request_payment_proof
        - proof:
            help: Request a payment proof from the recipient. If sending to a Tor address, the address will be filled automatically.
            long: proof
        - proof_address:
            help: Recipient proof address. If not using Tor, must be provided seprarately by the recipient
            short: z
            long: proof_address
            takes_value: true
        - fluff:
            help: Fluff the transaction (ignore Dandelion relay protocol)
            short: f
            long: fluff
        - message:
            help: Optional participant message to include
            short: g
            long: message
            takes_value: true
        - stored_tx:
            help: If present, use the previously stored Unconfirmed transaction with given id
            short: t
            long: stored_tx
            takes_value: true
        - ttl_blocks:
            help: If present, the number of blocks from the current after which wallets should refuse to process transactions further
            short: b
            long: ttl_blocks
            takes_value: true
        - outputs:
            help: a comma separated list of custom outputs to include in transaction
            short: p
            long: outputs
            takes_value: true
        - slatepack_recipient:
            help: send transaction as encoded slatepack for this recipient (wallet public key, similar to proof_address)
            long: slatepack_recipient
            takes_value: true
        - slate_version:
            help: use specific slate version for the output. Put version 4 if you are using slatepacks.
            long: slate_version
            takes_value: true
  - unpack:
      about: Unpack and display an armored Slatepack Message, decrypting if possible
      args:
        - file:
            help: File containing a slate or slatepack
            short: i
            long: file
            takes_value: true
        - content:
            help: Slate or slatepack content as a string
            short: c
            long: content
            takes_value: true
        - outfile:
            help: If present, the result will be stored into this file. By default it is printed to the console
            short: o
            long: outfile
            takes_value: true
  - receive:
      about: Processes a transaction file to accept a transfer from a sender
      args:
        - message:
            help: Optional participant message to include
            short: g
            long: message
            takes_value: true
        - file:
            help: File containing a slate or slatepack
            short: f
            long: file
            takes_value: true
        - content:
            help: Slate or slatepack content as a string
            short: c
            long: content
            takes_value: true
        - outfile:
            help: If present, overrides the filename and location of the output file.
            short: o
            long: outfile
            takes_value: true
  - finalize:
      about: Processes a receiver's transaction file to finalize a transfer.
      args:
        - file:
            help: File containing a slate or slatepack
            short: f
            long: file
            takes_value: true
        - content:
            help: Slate or slatepack content as a string
            short: c
            long: content
            takes_value: true
        - fluff:
            help: Fluff the transaction (ignore Dandelion relay protocol)
            short: l
            long: fluff
        - nopost:
            help: Do not post the transaction.
            short: n
            long: nopost
        - dest:
            help: Specify file to save the finalized slate.
            short: d
            long: dest
            takes_value: true
  - invoice:
      about: Initialize an invoice transaction.
      args:
        - amount:
            help: Number of coins to invoice  with optional fraction, e.g. 12.423
            index: 1
        - message:
            help: Optional participant message to include
            short: g
            long: message
            takes_value: true
        - dest:
            help: Name of destination slate output file
            short: d
            long: dest
            takes_value: true
        - slatepack_recipient:
            help: send transaction as encoded slatepack for this recipient (wallet public key, similar to proof_address)
            long: slatepack_recipient
            takes_value: true
  - finalize_invoice:
      about: Processes invoice transaction file to finalize a transfer.
      args:
        - file:
            help: File containing a slate or slatepack
            short: f
            long: file
            takes_value: true
        - content:
            help: Slate or slatepack content as a string
            short: c
            long: content
            takes_value: true
        - fluff:
            help: Fluff the transaction (ignore Dandelion relay protocol)
            short: l
            long: fluff
        - nopost:
            help: Do not post the transaction.
            short: n
            long: nopost
        - dest:
            help: Specify file to save the finalized slate.
            short: d
            long: dest
            takes_value: true
  - pay:
      about: Spend coins to pay the provided invoice transaction
      args:
        - minimum_confirmations:
            help: Minimum number of confirmations required for an output to be spendable
            short: c
            long: min_conf
            default_value: "10"
            takes_value: true
        - selection_strategy:
            help: Coin/Output selection strategy.
            short: s
            long: selection
            possible_values:
              - all
              - smallest
            default_value: all
            takes_value: true
        - estimate_selection_strategies:
            help: Estimates all possible Coin/Output selection strategies.
            short: e
            long: estimate-selection
        - method:
            help: Method for sending the processed invoice back to the invoice creator
            short: m
            long: method
            possible_values:
              - file
              - http
              - self
            default_value: file
            takes_value: true
        - dest:
            help: Send the transaction to the provided server (start with http://) or save as file.
            short: d
            long: dest
            takes_value: true
        - message:
            help: Optional participant message to include
            short: g
            long: message
            takes_value: true
        - input:
            help: Partial transaction to process, expects the invoicer's transaction file.
            short: i
            long: input
            takes_value: true
        - ttl_blocks:
            help: If present, the number of blocks from the current after which wallets should refuse to process transactions further
            short: b
            long: ttl_blocks
            takes_value: true
  - outputs:
      about: Raw wallet output info (list of outputs)
  - txs:
      about: Display transaction information
      args:
        - id:
            help: If specified, display transaction with given Id and all associated Inputs/Outputs
            short: i
            long: id
            takes_value: true
        - txid:
            help: If specified, display transaction with given TxID UUID and all associated Inputs/Outputs
            short: t
            long: txid
            takes_value: true
  - post:
      about: Posts a finalized transaction to the chain
      args:
        - input:
            help: File name of the transaction to post
            short: i
            long: input
            takes_value: true
        - fluff:
            help: Fluff the transaction (ignore Dandelion relay protocol)
            short: f
            long: fluff
  - submit:
      about: Submits a transaction that has already been finalized but not submitted to the network yet
      args:
        - input:
            help: Transaction file to submit
            short: i
            long: input
            takes_value: true
        - fluff:
            help: Fluff the transaction (ignore Dandelion relay protocol)
            short: f
            long: fluff
  - repost:
      about: Reposts a stored, completed but unconfirmed transaction to the chain, or dumps it to a file
      args:
        - id:
            help: Transaction ID containing the stored completed transaction
            short: i
            long: id
            takes_value: true
        - dumpfile:
            help: File name to duMp the transaction to instead of posting
            short: m
            long: dumpfile
            takes_value: true
        - fluff:
            help: Fluff the transaction (ignore Dandelion relay protocol)
            short: f
            long: fluff
  - cancel:
      about: Cancels a previously created transaction, freeing previously locked outputs for use again
      args:
        - id:
            help: The ID of the transaction to cancel
            short: i
            long: id
            takes_value: true
        - txid:
            help: The TxID UUID of the transaction to cancel
            short: t
            long: txid
            takes_value: true
  - info:
      about: Basic wallet contents summary
      args:
        - minimum_confirmations:
            help: Minimum number of confirmations required for an output to be spendable
            short: c
            long: min_conf
            default_value: "10"
            takes_value: true
  - init:
      about: Initialize a new wallet seed file and database
      args:
        - here:
            help: Create wallet files in the current directory instead of the default ~/.mwc directory
            short: h
            long: here
            takes_value: false
        - short_wordlist:
            help: Generate a 12-word recovery phrase/seed instead of default 24
            short: s
            long: short_wordlist
            takes_value: false
        - recover:
            help: Initialize new wallet using a recovery phrase
            short: r
            long: recover
            takes_value: false
  - open:
      about: Opens a wallet (interactive mode only)
  - close:
      about: Closes the wallet (interactive mode only)
  - recover:
      about: Displays a recovery phrase for the wallet. (use `init -r` to perform recovery)
  - address:
      about: Display the wallet's payment proof address
  - scan:
      about: Checks a wallet's outputs against a live node, repairing and restoring missing outputs if required
      args:
        - delete_unconfirmed:
            help: Delete any unconfirmed outputs, unlock any locked outputs and delete associated transactions while doing the check.
            short: d
            long: delete_unconfirmed
            takes_value: false
        - start_height:
            help: If given, the first block from which to start the scan (default 1)
            short: h
            long: start_height
            takes_value: true
        - backwards_from_tip:
            help: If given, start scan b blocks back from the tip
            short: b
            long: backwards_from_tip,
            takes_value: true
  - export_proof:
      about: Export a payment proof from a completed transaction
      args:
          - output:
              help: Output proof file
              index: 1
          - id:
              help: If specified, retrieve the proof for the given transaction ID
              short: i
              long: id
              takes_value: true
          - txid:
              help: If specified, retrieve the proof for the given Slate ID
              short: t
              long: txid
              takes_value: true
  - verify_proof:
      about: Verify a payment proof
      args:
          - input:
              help: Filename of a proof file
              index: 1
  - dump-wallet-data:
      about: Print wallet internal data (transactions, outputs)
      args:
        - file:
            help: write dump to the file instead of console
            short: f
            long: file
            takes_value: true
  - swap_create_from_offer:
      about: Create Buyer swap from the Offer message in the specified file
      args:
        - file:
            help: Filename where message with trade offer is stored. Please review the offer before accepting it
            short: f
            long: file
            takes_value: true
  - swap_start:
      about: Start MWC atomic swap trading.
      args:
        - mwc_amount:
            help: MWC amount to trade
            short: w
            long: mwc_amount
            takes_value: true
        - minimum_confirmations:
            help: Minimum number of confirmations required for an output to be spendable
            short: c
            long: min_conf
            default_value: "10"
            takes_value: true
        - secondary_currency:
            help: Secondary currency name
            short: s
            long: secondary_currency
            takes_value: true
            possible_values:
              - bch
              - btc
              - ltc
              - zcash
              - dash
              - doge
            default_value: bch
        - secondary_amount:
            help: Secondary currency amount excluding fees
            short: b
            long: secondary_amount
            takes_value: true
        - secondary_address:
            help: Secondary currency withdrawal address
            short: a
            long: secondary_address
            takes_value: true
        - secondary_fee:
            help: Tx fee for secondary currency (satoshi per byte)
            long: secondary_fee
            takes_value: true
        - who_lock_first:
            help: Coins locking order. Who locks first?
            short: l
            long: who_lock_first
            takes_value: true
            possible_values:
              - buyer
              - seller
            default_value: seller
        - mwc_confirmations:
            help: Number of confirmations required for MWC coins
            long: mwc_confirmations
            takes_value: true
            default_value: "60"
        - secondary_confirmations:
            help: Number of confirmations required for Secondary Currency
            long: secondary_confirmations
            takes_value: true
            default_value: "3"
        - message_exchange_time:
            help: How much time, in minutes, is reserved for every session of message exchange (Offer exchange and create redeem transaction sessions). Please reserve enough time. If you go over the time limit, your swap will automatically be cancelled.
            long: message_exchange_time
            takes_value: true
            default_value: "60"
        - redeem_time:
            help: How much time, in minutes, is reserved for execution of redeem or refund transaction. Please reserve enough time for this operation. If you go over the time limit, your swap will automatically be cancelled.
            long: redeem_time
            takes_value: true
            default_value: "60"
        - method:
            help: Method for sending the message to the Buyer
            short: m
            long: method
            possible_values:
               - tor
               - file
               - mwcmqs
            takes_value: true
        - dest:
            help: destination to send swap message to (i.e. onion address or file location)
            short: d
            long: dest
            takes_value: true
        - electrum_uri1:
            help: primary private ElectrumX node URI. If not defined, community node will be used
            long: electrum_uri1
            takes_value: true
        - electrum_uri2:
            help: secondary private ElectrumX node URI. If not defined, community node will be used
            long: electrum_uri2
            takes_value: true
        - dry_run:
            help: verify parameters, do not create a new swap trade
            long: dry_run
            takes_value: false
  - swap:
      about: Trade MWC with another currency via atomic swap
      args:
        - list:
            help: List SWAP trades
            short: l
            long: list
            takes_value: false
        - remove:
            help: Remove SWAP trade. Note, be sure that you finish or cancel your trade before you delete it.
            short: r
            long: remove
            takes_value: false
        - check:
            help: Check the status of the trade
            short: c
            long: check
            takes_value: false
        - process:
            help: Process the next step of the swap trade
            short: p
            long: process
            takes_value: false
        - autoswap:
            help: Enter all required values now and let the swap process be carried out without any more inputs.
            short: a
            long: autoswap
            takes_value: false
        - dump:
            help: Dump the contents of the swap file decrypted on screen
            short: u
            long: dump
            takes_value: false
        - trade_export:
            help: Export the trade data into the file for the backup
            long: trade_export
            takes_value: true
        - trade_import:
            help: Import (restore) the trade data from the backup file
            long: trade_import
            takes_value: true
        - adjust:
            help: Modify the swap trade workflow. You can use this to cancel a swap. For all other values, please only proceed if you know what you are doing!
            short: j
            long: adjust
            takes_value: true
            possible_values:
              - cancel
              - destination
              - secondary_address
              - secondary_fee
              - electrumx_uri
              - SellerOfferCreated
              - SellerSendingOffer
              - SellerWaitingForAcceptanceMessage
              - SellerWaitingForBuyerLock
              - SellerPostingLockMwcSlate
              - SellerWaitingForLockConfirmations
              - SellerWaitingForInitRedeemMessage
              - SellerSendingInitRedeemMessage
              - SellerWaitingForBuyerToRedeemMwc
              - SellerRedeemSecondaryCurrency
              - SellerWaitingForRedeemConfirmations
              - SellerSwapComplete
              - SellerWaitingForRefundHeight
              - SellerPostingRefundSlate
              - SellerWaitingForRefundConfirmations
              - SellerCancelledRefunded
              - SellerCancelled
              - BuyerOfferCreated
              - BuyerSendingAcceptOfferMessage
              - BuyerWaitingForSellerToLock
              - BuyerPostingSecondaryToMultisigAccount
              - BuyerWaitingForLockConfirmations
              - BuyerSendingInitRedeemMessage
              - BuyerWaitingForRespondRedeemMessage
              - BuyerRedeemMwc
              - BuyerWaitForRedeemMwcConfirmations
              - BuyerSwapComplete
              - BuyerWaitingForRefundTime
              - BuyerPostingRefundForSecondary
              - BuyerWaitingForRefundConfirmations
              - BuyerCancelledRefunded
              - BuyerCancelled
        - stop_auto_swap:
            help: Stop all the ongoing auto swap processes
            short: t
            long: stop_auto_swap
            takes_value: false
        - swap_id:
            help: Swap trade Id. Required for commands that are specific for single trade
            short: i
            long: swap_id
            takes_value: true
        - method:
            help: Method for sending the message to other party
            short: m
            long: method
            possible_values:
              - tor
              - file
              - mwcmqs
            takes_value: true
        - dest:
            help: destination to send swap file to (i.e. onion address or file location)
            short: d
            long: dest
            takes_value: true
        - apisecret:
            help: Swapping counterpart apisecret. Applicable to Tor address only. Default is none.
            short: s
            long: apisecret
            takes_value: true
        - secondary_fee:
            help: Fee for Secondary Currency transactions. See fee units with 'swap --check' command
            long: secondary_fee
            takes_value: true
        - message_file_name:
            help: Filename with swap message content. Can be used for file based messages exchange process
            long: message_file_name
            takes_value: true
        - buyer_refund_address:
            help: Secondary Currency refund address for the Buyer
            long: buyer_refund_address
            takes_value: true
        - secondary_address:
            help: Secondary currency withdrawal address to adjust
            long: secondary_address
            takes_value: true
        - start_listener:
            help: Only needed if in CLI mode doing auto swap and the method is Tor or mwcmqs. Please specify false if listener was started in previous auto swap in the same CLI session.
            long: start_listener
            takes_value: false
        - electrum_uri1:
            help: primary private ElectrumX node URI. If never setup, community node will be used
            long: electrum_uri1
            takes_value: true
        - electrum_uri2:
            help: secondary private ElectrumX node URI. If never setup, community node will be used
            long: electrum_uri2
            takes_value: true
  - eth:
      about: basic eth account management for eth swap
      args:
        - list:
            help: list all eth accounts
            short: l
            long: list
            takes_value: false
        - new:
            help: generate new eth accout
            short: n
            long: new
            takes_value: false
        - import:
            help: import an exist eth account
            short: i
            long: import
            takes_value: false
